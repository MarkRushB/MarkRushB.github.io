name: Sync Discussions to Hexo

on:
  push:
    branches:
      - main  # 默认支持直接 push 触发
  discussion:
    types: [created]  # 支持当 Discussion 发布时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  sync-discussions:
    if: github.event_name == 'discussion'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 确保 GITHUB_TOKEN 有写权限
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm install

      - name: Fetch and Process Discussion
        run: |
          echo '${{ toJson(github.event.discussion) }}' > new_discussion.json

          # 调试输出整个 JSON 文件
          echo "打印 new_discussion.json 内容以进行调试:"

          title=$(jq -r '.title // empty' new_discussion.json)
          createdAt=$(jq -r '.created_at // empty' new_discussion.json)
          formattedDate=$(date -d "$createdAt" "+%Y-%m-%d %H:%M:%S" 2>/dev/null || echo "$createdAt")
          body=$(jq -r '.body // empty' new_discussion.json)
          labels=$(jq -r '.labels[].name // empty' new_discussion.json | tr '\n' ',' | sed 's/,$//')

          if [[ -z "$title" || -z "$body" ]]; then
            echo "No valid discussion data found. Exiting."
            exit 0
          fi

          # Default empty layout and icon
          layout=""
          icon=""

          # Assign layout and icon based on labels
          if echo "$labels" | grep -q "memo"; then
            layout="tweet"
            icon="sad"
          elif echo "$labels" | grep -q "bullshit"; then
            layout=""
            icon=""
          fi

          # 进一步调试输出
          echo "提取的标题: $title"
          echo "提取的创建时间: $formattedDate"
          echo "提取的标签: $labels"
          echo "提取的内容: $body"

          # Build the markdown content
          markdown_content="---
          title: \"$title\"
          date: $formattedDate"
                    [[ -n "$layout" ]] && markdown_content="$markdown_content
          layout: $layout"
                    [[ -n "$icon" ]] && markdown_content="$markdown_content
          icon: $icon"
                    markdown_content="$markdown_content
          ---
          
          $body"

          # Save to file
          mkdir -p source/_posts
          filename="source/_posts/$title.md"

          # 输出文件名以进行调试
          echo "生成的文件名为: $filename"
          
          echo "$markdown_content" > "$filename"

          # 调试输出整个 Markdown 文件
          echo "生成的 Markdown 文件内容:"
          cat "$filename"

          echo "列出 source/_posts/ 目录中的文件:"
          ls -lah source/_posts/

      - name: Commit and Push New Post
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add source/_posts/*.md
          git commit -m "New Discussion Post: $title" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/MarkRushB/markrushb.github.io.git main || echo "No changes to push"

  # build-and-deploy:
  #   runs-on: ubuntu-latest
  #   needs: sync-discussions  # 依赖 sync-discussions，但 push 时不受影响
  #   if: github.event_name == 'push' || (github.event_name == 'discussion' && success())
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         submodules: recursive

  #     - name: Use Node.js 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"

  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: node_modules
  #         key: ${{ runner.OS }}-npm-cache
  #         restore-keys: |
  #           ${{ runner.OS }}-npm-cache

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Build Hexo
  #       run: npm run build

  #     - name: Upload Pages artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: ./public

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  build:
    # 如果是 push，直接运行；如果是 discussion，需要等待 sync-discussions
    needs: sync-discussions
    if: github.event_name == 'push' || (github.event_name == 'discussion' && success())
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          
      - name: 拉取最新代码
        run: |
          echo "拉取远程最新代码"
          git fetch origin
          git reset --hard origin/main

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache
          restore-keys: |
            ${{ runner.OS }}-npm-cache

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    # 依赖 build 阶段，确保在 build 完成后运行
    needs: build
    if: success()
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

